package com.wondersgroup.pss.service;

import java.util.List;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.wondersgroup.core.bean.Page;

import java.util.List;
import java.util.Map;

import com.wondersgroup.core.constant.ConfigConstants;
import com.wondersgroup.core.constant.DicConstants;

import com.wondersgroup.core.util.CascadeUtil;
import com.wondersgroup.pss.bean.SearchCondition;
import com.wondersgroup.pss.bo.PssQa;
import com.wondersgroup.pss.dao.QADAO;

@Service
@Transactional
public class QAService {
    @Autowired
    private QADAO qaDAO;

    public void add(PssQa pssQa) {
        // TODO Auto-generated method stub
        qaDAO.add(pssQa);
    }

    public void delete(PssQa pssQa) {
        // TODO Auto-generated method stub
        qaDAO.delete(pssQa);
    }

    public void update(PssQa pssQa) {
        // TODO Auto-generated method stub
        qaDAO.update(pssQa);
    }


    public Page search(SearchCondition qacondition) {
        // TODO Auto-generated method stub
        Page page = qaDAO.search(qacondition);
        if (page != null) {
            for( PssQa qa : (List<PssQa>)page.getResult() ){
                CascadeUtil.lazyInit(qa.getPssQaTagSet());
            }
            
        }
        return page;
    }

    public Map<String,String> getProductDic(){
        return qaDAO.getProductDic();
    }

    
//    /**
//     * robot
//	 * 根据jpql语句查询单个问题对象
//	 * 
//	 * @param pssQa
//	 * @return
//	 */
//	public PssQa getUniquePssQaByJPQL(PssQa pssQa){
//		return qaDAO.getPssQaByJPQL(pssQa);
//	}
	
	/**
	 * robot
	 * 通过sql语句访问数据库，
	 * 通过连表查询， 
	 * 通过tagId查询qaCont
	 * 
	 * @param qacondition
	 * @return
	 */
//	public List<PssQa> searchRobot(SearchCondition qacondition) {
//		return qaDAO.searchRobot(qacondition);
//	}


    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }

    

}
