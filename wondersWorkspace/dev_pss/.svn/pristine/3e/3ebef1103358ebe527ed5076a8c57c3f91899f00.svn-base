package com.wondersgroup.pss.dao;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Repository;

import com.wondersgroup.core.bean.Page;
import com.wondersgroup.core.dao.BaseDAO;
import com.wondersgroup.pss.bean.SearchCondition;
import com.wondersgroup.pss.bo.PssProd;
import com.wondersgroup.pss.bo.PssQa;

@Repository
public class QADAO extends BaseDAO {
    /**
     * 增加一个问题
     * 
     * @param pssQa
     */
    public void add(PssQa pssQa) {
        super.save(pssQa);
    }

    /**
     * 删除一个问题
     * 
     * @param pssQa
     */
    public void delete(PssQa pssQa) {
        super.delete(pssQa);
    }

    /**
     * 修改问题
     * 
     * @param pssQa
     */
    public void update(PssQa pssQa) {
        super.update(pssQa);
    }

    /**
     * 根据jpql语句查询单个问题对象
     * 
     * @param pssQa
     * @return
     */
    public Page search(SearchCondition qacondition) {
        // 创建JBQL语句
        StringBuffer jpql = new StringBuffer("select pssQa from PssQa pssQa where exists (select 1 from PssQaTag pssQaTag where 1=1 ");
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        int pn = qacondition.getPageNo();
        int ps = qacondition.getPageSize();
        // 如果标签不为空，拼接到JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getTagDesc())) {
            jpql.append(" and pssQa= pssQaTag.pssQa and pssQaTag.tagDesc = :tagDesc");
            parameterMap.put("tagDesc", StringUtils.trimToEmpty(qacondition.getTagDesc()));
        }
        jpql.append(")");
        // 如果问题不为空，拼接入JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getQaDesc())) {
            jpql.append(" and pssQa.qaDesc like '%");
            jpql.append(qacondition.getQaDesc());
            jpql.append("%'");
        }
        // 如果产品ID不为空，拼接入JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getProdId())) {
            jpql.append(" and pssQa.prodId = :prodId");
            parameterMap.put("prodId", qacondition.getProdId());
        }
        return super.findByJPQLWithPage(jpql.toString(), pn, ps, parameterMap);

    }

    /**
     * 根据jpql语句查询单个问题对象
     * 
     * @param pssQa
     * @return
     */
    public PssQa getPssQaByJPQL(PssQa pssQa) {
        PssQa pq = super.findUniqueByJPQL("select pssQa from PssQa pssQa where pssQa.qaId = '" + pssQa.getQaId() + "'");
        System.out.println("qaCont" + pq.getQaCont());
        return pq;
    }

    /**
     * 通过squeal语句访问数据库， 通过连表查询， 通过tagId查询qaCont
     * 
     * @param kwdList
     * @return
     */
    public List<PssQa> searchRobot(List<String> kwdList) {
        if (kwdList == null || kwdList.isEmpty()) {
            return null;
        }

        StringBuffer jpql = new StringBuffer("select qa from PssQa qa where 1 != 1");
        Map<String, Object> parameterMap = new HashMap<String, Object>();

        int idx = 0;
        for (String keyword : kwdList) {
            jpql.append(" or qa.qaDesc like :qaDesc").append(idx);
            jpql.append(" or exists (select 1 from PssQaTag tag where 1=1 and qaId = qa.qaId and tagDesc = :tagDesc").append(idx).append(")");

            parameterMap.put("qaDesc" + idx, StringUtils.trimToEmpty(keyword));
            parameterMap.put("tagDesc" + idx++, StringUtils.trimToEmpty(keyword));
        }

        return super.findByJPQL(jpql.toString(), parameterMap);
    }

    public Map<String, String> getProductDic() {
        StringBuilder jpql = new StringBuilder("select pssProd from PssProd pssProd");
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        List<PssProd> result = super.findByJPQL(jpql.toString(), parameterMap);
        Map<String, String> productDic = new LinkedHashMap<String, String>();
        if (result != null) {
            for (PssProd tmp : result) {
                productDic.put(tmp.getProdId(), tmp.getProdName());
            }
        }
        return productDic;
    }

    /**
     * 通过qaId查找pssQa
     * 
     * @param qaId
     * @return
     */
    public PssQa findById(String qaId) {
        // TODO Auto-generated method stub
        PssQa pssQa = super.get(PssQa.class, qaId);
        return pssQa;
    }
}
