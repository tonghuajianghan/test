package com.wondersgroup.pss.aspect;

import java.lang.reflect.Method;

import org.apache.log4j.Logger;
import org.aspectj.lang.ProceedingJoinPoint;
import org.aspectj.lang.annotation.Around;
import org.aspectj.lang.annotation.Aspect;
import org.aspectj.lang.annotation.Pointcut;
import org.springframework.stereotype.Repository;

import com.wondersgroup.core.annotation.Outer;
import com.wondersgroup.core.aspect.BaseAspect;
import com.wondersgroup.core.constant.ConfigConstants;
import com.wondersgroup.core.constant.GlobalConstants;

@Repository
@Aspect
public class SessionAspect extends BaseAspect {

    private final Logger logger = Logger.getLogger(SessionAspect.class);

    // 作用于com.wondersgroup包及其子包下的controller文件夹下的以Controller结尾的类的任意方法
    @Pointcut("execution (* com.wondersgroup..controller.*Controller.*(..))")
    public void pointcut() {
    }

    // 判断用户会话信息是否过期
    @Around("pointcut()")
    public Object readSession(ProceedingJoinPoint point) throws Throwable {
        // 仅当debug模式打开时不进行session校验
        String debug = ConfigConstants.getInstance().get("debug.on");
        if (GlobalConstants.YES_VALUE.equals(debug)) {
            return point.proceed();
        }

        // HttpSession session = WebContext.getSession();

        Class<?> targetClass = point.getTarget().getClass();

        // 对以@Outer标注的类不进行session校验
        if (targetClass.isAnnotationPresent(Outer.class)) {
            return point.proceed();
        }

        // 获取目标方法
        Method targetMethod = this.getMethod(point);

        if (targetMethod == null) {
            logger.error("找不到相匹配的函数");
            return GlobalConstants.FORWARD_ERROR;
        }

        // 对以@Outer标注的方法不进行session校验
        if (targetMethod.isAnnotationPresent(Outer.class)) {
            return point.proceed();
        }

        // session中不存在用户信息，则登录超时
        // UserInfo user = (UserInfo) session.getAttribute(GlobalConstants.SESSION_USER);
        // if (user == null) {
        // logger.error("Session中的用户信息不存在");
        //
        // // 会话超时，页面跳转
        // return forward(targetMethod, GlobalConstants.FORWARD_TIMEOUT);
        // }

        return point.proceed();
    }
}
