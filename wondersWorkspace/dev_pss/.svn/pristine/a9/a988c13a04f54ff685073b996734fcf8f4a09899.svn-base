package com.wondersgroup.pss.service;

import java.util.List;

import java.util.ArrayList;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.informix.util.stringUtil;
import com.wondersgroup.core.bean.Page;

import java.util.Arrays;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import com.wondersgroup.core.constant.ConfigConstants;
import com.wondersgroup.core.constant.DicConstants;
import com.wondersgroup.core.util.CascadeUtil;
import com.wondersgroup.pss.bean.SearchCondition;
import com.wondersgroup.pss.bo.PssQa;
import com.wondersgroup.pss.bo.PssQaTag;
import com.wondersgroup.pss.dao.QADAO;

@Service
@Transactional
public class QAService {
    @Autowired
    private QADAO qaDAO;

    public void add(PssQa pssQa) {
        // TODO Auto-generated method stub
        qaDAO.add(pssQa);
    }

    public void delete(PssQa pssQa) {
        // TODO Auto-generated method stub
        qaDAO.delete(pssQa);
    }

    public void update(PssQa pssQa) {
        // TODO Auto-generated method stub
        qaDAO.update(pssQa);
    }

    public Page search(SearchCondition qacondition) {
        // TODO Auto-generated method stub
        Page page = qaDAO.search(qacondition);
        if (page != null) {
            for (PssQa qa : (List<PssQa>) page.getResult()) {
                CascadeUtil.lazyInit(qa.getPssQaTagSet());
            }

        }
        return page;
    }

    public Map<String, String> getProductDic() {
        return qaDAO.getProductDic();
    }

    /**
     * robot 通过sql语句访问数据库， 通过连表查询， 通过tagId查询qaCont
     *
     * @param searchRobot
     * @return
     */
    public String searchRobot(String keywords) {
        // 返回问题的答案
        String robotQaCont = "";
        List<PssQa> list = qaDAO.searchRobot(Arrays.asList(keywords.split(" ")));
        int weight;
        for (PssQa pssQa : list) {
            weight = 0;
            StringBuilder tags = new StringBuilder();
            for (PssQaTag tagTmp : pssQa.getPssQaTagSet()) {
                tags.append(tagTmp.getTagDesc());
            }
            for (String key : Arrays.asList(keywords.split(" "))) {
                if (pssQa.getQaDesc().indexOf(key) != -1) {
                    weight++;
                } else if (tags.indexOf(key) != -1) {
                    weight = weight + 2;
                }
            }
            pssQa.setPermission(weight);
        }

        return robotQaCont;
    }

    @Override
    public String toString() {
        // TODO Auto-generated method stub
        return super.toString();
    }

    public PssQa findById(String qaId) {
        PssQa pssQa = new PssQa();
        pssQa = qaDAO.findById(qaId);
        return pssQa;
    }

}
