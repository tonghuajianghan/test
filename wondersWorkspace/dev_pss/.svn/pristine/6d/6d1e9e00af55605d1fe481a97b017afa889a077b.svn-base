package com.wondersgroup.pss.dao;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.wondersgroup.core.dao.BaseDAO;
import com.wondersgroup.pss.bean.SearchCondition;
import com.wondersgroup.pss.bo.PssQa;
import com.wondersgroup.core.dao.BaseDAO;
import com.wondersgroup.pss.bo.PssQa;

import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Repository;

@Repository
public class QADAO extends BaseDAO{
    
    /**
     * 增加一个问题
     * @param pssQa
     * 
     */
    public void add(PssQa pssQa) {
        super.save(pssQa);
    }
    
    /**
     * 删除一个问题
     * @param pssQa
     */
    public void delete(PssQa pssQa) {
        super.delete(pssQa);
    }
    
    /**
     * 修改问题
     * @param pssQa
     */
    public void update(PssQa pssQa) {
        super.update(pssQa);
    }
    /**
     * 根据jpql语句查询单个问题对象
     * 
     * @param pssQa
     * @return
     */
    public PssQa getPssQaByJPQL(PssQa pssQa) {
		PssQa pq = super
				.findUniqueByJPQL("select pssQa from PssQa pssQa where pssQa.qaId = '"
						+ pssQa.getQaId() + "'");
		System.out.println("qaCont" + pq.getQaCont());
		return pq;
	}
    
	/**
	 *  通过sql语句访问数据库，
	 *  通过连表查询，
	 *  通过tagId查询qaCont
	 * 
	 * @param qacondition
	 * @return
	 */
	public List<PssQa> searchRobot(SearchCondition qacondition) {
		// 创建JBQL语句
		StringBuffer jpql = new StringBuffer(
				"select pssQA from PssQa pssQA  where exists (select 1 from PssQaTag pssQaTag where 1=1 ");
		Map<String, Object> parameterMap = new HashMap<String, Object>();
				
		// 如果不为空，拼接到JPQL语句中
		if (StringUtils.isNotBlank(qacondition.getTag().getTagId())) {
			jpql.append(" and pssQa = pssQaTag.pssQa and pssQaTag.tagId = :qaTag");
			parameterMap.put("qaTag",
					StringUtils.trimToEmpty(qacondition.getTag().getTagId()));
		}
		jpql.append(")");
		 
		List<PssQa> l= super.findByJPQL(jpql.toString(), parameterMap);		
		return super.findByJPQL(jpql.toString(), parameterMap);
		
	}

}
