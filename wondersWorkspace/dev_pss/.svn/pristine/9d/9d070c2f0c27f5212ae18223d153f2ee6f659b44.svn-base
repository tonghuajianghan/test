package com.wondersgroup.pss.dao;

import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import com.wondersgroup.pss.bo.PssProd;
import org.apache.commons.lang.StringUtils;
import org.springframework.stereotype.Repository;

import com.wondersgroup.core.bean.Page;
import com.wondersgroup.core.dao.BaseDAO;
import com.wondersgroup.pss.bean.SearchCondition;
import com.wondersgroup.pss.bo.PssQa;

@Repository
public class QADAO extends BaseDAO {

    /**
     * 增加一个问题
     *
     * @param pssQa
     */
    public void add(PssQa pssQa) {
        super.save(pssQa);
    }

    /**
     * 删除一个问题
     *
     * @param pssQa
     */
    public void delete(PssQa pssQa) {
        super.delete(pssQa);
    }

    /**
     * 修改问题
     *
     * @param pssQa
     */
    public void update(PssQa pssQa) {
        super.update(pssQa);
    }

    /**
     * 根据jpql语句查询单个问题对象
     *
     * @param pssQa
     * @return
     */
    public Page search(SearchCondition qacondition) {
        // 创建JBQL语句
        StringBuffer jpql = new StringBuffer("select pssQa from PssQa pssQa where exists (select 1 from PssQaTag pssQaTag where 1=1 ");
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        int pn = qacondition.getPageNo();
        int ps = qacondition.getPageSize();
        // 如果标签不为空，拼接到JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getTagDesc())) {
            jpql.append(" and pssQa= pssQaTag.pssQa and pssQaTag.tagDesc = :tagDesc");
            parameterMap.put("tagDesc", StringUtils.trimToEmpty(qacondition.getTagDesc()));
        }
        jpql.append(")");
        // 如果问题不为空，拼接入JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getQaDesc())) {
            jpql.append(" and pssQa.qaDesc = :qaDesc");
            parameterMap.put("qaDesc", qacondition.getQaDesc());
        }
        // 如果产品ID不为空，拼接入JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getProdId())) {
            jpql.append(" and pssQa.prodId = :prodId");
            parameterMap.put("prodId", qacondition.getProdId());
        }

        return super.findByJPQLWithPage(jpql.toString(), pn, ps, parameterMap);

    }

    /**
     * 根据jpql语句查询单个问题对象
     *
     * @param pssQa
     * @return
     */
    public PssQa getPssQaByJPQL(PssQa pssQa) {
        PssQa pq = super.findUniqueByJPQL("select pssQa from PssQa pssQa where pssQa.qaId = '" + pssQa.getQaId() + "'");
        System.out.println("qaCont" + pq.getQaCont());
        return pq;
    }

    /**
     * 通过sql语句访问数据库， 通过连表查询， 通过tagId查询qaCont
     *
     * @param qacondition
     * @return
     */
    public List<PssQa> searchRobot(SearchCondition qacondition) {
    	
    	/*select * from PSS_QA qa where QA_DESC like '%my%' or 
    	exists (select 1 from PSS_QA_TAG tag where tag.QA_ID = qa.QA_ID and TAG_DESC = 'my')*/
    	
        // 创建JBQL语句
        StringBuffer jpql = new StringBuffer("select pssQA from PssQa pssQA where ");
        Map<String, Object> parameterMap = new HashMap<String, Object>();
  
        // QA_DESC如果不为空，拼接到JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getQaDesc())) {
            jpql.append("pssQa.qaDesc = :qaDesc");
            parameterMap.put("qaDesc", StringUtils.trimToEmpty(qacondition.getQaDesc()));
        }              
        // 如果不为空，拼接到JPQL语句中
        if (StringUtils.isNotBlank(qacondition.getTagDesc())) {
            jpql.append(" or exists (select 1 from PssQaTag pssQaTag where 1=1 and pssQa = pssQaTag.pssQa and pssQaTag.tagDesc = :tagDesc");
            parameterMap.put("tagDesc", StringUtils.trimToEmpty(qacondition.getTagDesc()));
        }
        jpql.append(")");
        return super.findByJPQL(jpql.toString(), parameterMap);

    }

    public Map<String, String> getProductDic() {
        StringBuilder jpql = new StringBuilder("select pssProd from PssProd pssProd");
        Map<String, Object> parameterMap = new HashMap<String, Object>();
        List<PssProd> result = super.findByJPQL(jpql.toString(), parameterMap);
        Map<String,String> productDic = new LinkedHashMap<String, String>();
        if(result != null){
            for(PssProd tmp : result){
                productDic.put(tmp.getProdId(),tmp.getProdName());
            }
        }
        return productDic;
    }
}
