package model.xgb.action;

import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.URLDecoder;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.UUID;

import javax.servlet.ServletConfig;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import model.xgb.bo.ContextDataService;
import model.xgb.bo.CountryScholarshipService;
import model.xgb.bo.FileService;
import model.xgb.bo.ManagerService;
import model.xgb.bo.StudentService;
import model.xgb.bo.TeacherService;
import model.xgb.bo.impl.ContextDataServiceImpl;
import model.xgb.bo.impl.CountryScholarshipServiceImpl;
import model.xgb.bo.impl.FileServiceImpl;
import model.xgb.bo.impl.ManagerServiceImpl;
import model.xgb.bo.impl.StudentServiceImpl;
import model.xgb.bo.impl.TeacherServiceImpl;
import model.xgb.dao.ClassesDao;
import model.xgb.dao.ContextDataDAO;
import model.xgb.dao.ReligionActiveDao;
import model.xgb.dao.StudentDetailDAO;
import model.xgb.dao.TermGuiderManageDao;
import model.xgb.dao.db.ClassesDBDao;
import model.xgb.dao.db.ContextDataDBDAO;
import model.xgb.dao.db.OrgDBDAO;
import model.xgb.dao.db.ReligionActiveDBDao;
import model.xgb.dao.db.StudentDetailDBDAO;
import model.xgb.dao.db.TermGuiderManageDBDao;
import model.xgb.util.Pagination;
import model.xgb.util.TreeList;
import model.xgb.vo.Classes;
import model.xgb.vo.ContextData;
import model.xgb.vo.Countryscholarship;
import model.xgb.vo.Files;
import model.xgb.vo.Operator;
import model.xgb.vo.Org;
import model.xgb.vo.ReligionActive;
import model.xgb.vo.Student;
import model.xgb.vo.StudentDetail;
import model.xgb.vo.Teacher;

import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.Region;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.actions.DispatchAction;
import org.hibernate.Session;
import org.jdom.Document;
import org.jdom.Element;
import org.jdom.input.SAXBuilder;
import org.jdom.output.XMLOutputter;

import cn.edu.cust.levin.business.BusinessFactory;

import model.xgb.util.Pagination;

public class Manage extends DispatchAction{

	public ActionForward getDir(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {  
		// int opid =Integer.parseInt(request.getParameter("opid"));
		Teacher manager =(Teacher)request.getSession().getAttribute("manager");
		try{
			ManagerService ms = (ManagerService)BusinessFactory.getBusiness(ManagerServiceImpl.class);
		    List dirs = ms.getDir(manager.getId().intValue());
		    request.setAttribute("dirs", dirs);
		    return mapping.findForward("");
		}catch(Exception ex){
			return mapping.findForward("error");
		}
	}
	
public ActionForward getOperator(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			ManagerService ms = (ManagerService) BusinessFactory
					.getBusiness(ManagerServiceImpl.class);
	//		List newOpList = new ArrayList();
			int id = Integer.parseInt(request.getParameter("id"));
			Teacher teacher = (Teacher) request.getSession().getAttribute(
					"manager");
			if (teacher!= null) {
				List operators = new ArrayList();
				List opList = ms.getOperators(teacher.getId().intValue());
				for (int i = 0; i < opList.size(); i++) {
					Operator o = (Operator) opList.get(i);
					if (o.getDir().getId().intValue() == id)
						operators.add(o);
				}
				// 定Operator操作显示顺序开始
			/*	Operator oper[] = new Operator[operators.size()];
				for (int j = 0; j < operators.size(); j++) {
					oper[j] = (Operator) operators.get(j);
				}
				for (int j = 0; j < operators.size(); j++) {
					for (int i = 1; i < oper.length; i++) {
						Operator oper1 = null;
						if (oper[i - 1].getId().intValue() > oper[i].getId().intValue()) {
							oper1 = oper[i];
							oper[i] = oper[i - 1];
							oper[i - 1] = oper1;
						}
					}
				}
				for (int i = 0; i < oper.length; i++) {
					newOpList.add(oper[i]);
				}*/
				// 定Operator操作显示顺序结束
				request.getSession().setAttribute("OperatorList", operators);
				return mapping.findForward("mGetOperator");
			} else {
				request.setAttribute("info", "取得某一目录下的操作时出现错误");
				return mapping.findForward("error");
			}
		} catch (Exception ex) {
			request.setAttribute("info", "取得某一目录下的操作时出现错误");
			return mapping.findForward("error");
		}

	}
	
	public ActionForward changePasword(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		  String newpassword = request.getParameter("newPassword");
		  String againnewpwd = request.getParameter("againPassword");
		  String oldpassword = request.getParameter("oldPassword");
		  Teacher manager = (Teacher)request.getSession().getAttribute("manager");
		  int tid =manager.getId().intValue();
		  String msg = null;
		  
		  newpassword = cn.edu.cust.custcrypto.MD5Crypto.encodeMD5Non32(newpassword);
		  againnewpwd = cn.edu.cust.custcrypto.MD5Crypto.encodeMD5Non32(againnewpwd);
		  oldpassword = cn.edu.cust.custcrypto.MD5Crypto.encodeMD5Non32(oldpassword);
		  
		  
		try{
			ManagerService ms = (ManagerService)BusinessFactory.getBusiness(ManagerServiceImpl.class);
			TeacherService ts = (TeacherService)BusinessFactory.getBusiness(TeacherServiceImpl.class);
			Teacher teacher = ts.getTeacher(tid);
			if(cn.edu.cust.custcrypto.MD5Crypto.verifyPasswordForAllTypes(teacher.getPassword(), oldpassword)){
				if(newpassword.equals(againnewpwd)&&!(newpassword.equals(oldpassword))){
					ms.changePasword(tid, newpassword);
					msg="修改密码成功";
					request.setAttribute("info", msg);
					return mapping.findForward("success");
				}else if(newpassword.equals(againnewpwd)&& newpassword.equals(oldpassword)){
					msg="你想修改的密码跟原密码相同";
					request.setAttribute("info", msg);
					return mapping.findForward("error");
				}else{
					msg="请确认两次输入的密码是否一致！";
					request.setAttribute("info", msg);
					return mapping.findForward("error");
				}
			}else{
				msg="你输入的原密码不正确";
				request.setAttribute("info", msg);
				 return mapping.findForward("error");
			}
		}catch(Exception ex){
			msg="修改密码失败！";
			request.setAttribute("info", msg);
			return mapping.findForward("error");
		}
	}
	
	public ActionForward getClassStudent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// 从 request 中得到 page,从全局中得到 size , 分页参数,
		// 目前不分页
		int size = ((Integer)getServlet().getServletContext().getAttribute("size")).intValue();
		int page = (request.getParameter("page")==null||request.getParameter("page").trim().length()<=0)?1:Integer.parseInt(request.getParameter("page"));
		Pagination pagination = new Pagination();
/*		int size = -1;
		int page = -1;
		Pagination pagination = null;*/
		
		int orgId = -1;
		String selectedOrgIdS = request.getParameter("selectedOrgId");
		if(selectedOrgIdS != null && selectedOrgIdS.length() > 0)
		{
			orgId = Integer.parseInt(selectedOrgIdS);
			request.getSession().setAttribute("selectedOrgId", new Integer(orgId));
		}
		
		Teacher manager = (Teacher)request.getSession().getAttribute("manager");
		if(orgId < 0)
			orgId = manager.getOrg().getId().intValue();		
		
		try{
			TeacherService ts = (TeacherService)BusinessFactory.getBusiness(TeacherServiceImpl.class);
			ManagerService ms = (ManagerService)BusinessFactory.getBusiness(ManagerServiceImpl.class);
			List students = ts.getClassStudent(orgId, size, page, pagination);
			request.setAttribute("students", students);
			TreeList tl = ms.getOrgTree(manager.getOrg().getId().intValue());
			request.setAttribute("orgTree", tl);
			request.setAttribute("pagination", pagination);
			
			request.setAttribute("pagiUrl", "manage.do?method=getClassStudent&selectedOrgId=");
			return mapping.findForward("showStudent");
		}catch(Exception ex){
			request.setAttribute("info", "得到学生列表出错");
			return mapping.findForward("error");
		}
	}
	
	public ActionForward getStudent(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		
//		request.setCharacterEncoding("UTF-8");
		
		String sname = request.getParameter("sname");
		String spolicstate =request.getParameter("spolicstate");
		String sno = request.getParameter("sno");
		String sgrade = request.getParameter("sgrade");
		String scardId = request.getParameter("scardId");
		String city = request.getParameter("city");
		String strainrank = request.getParameter("strainrank");
		String sclass = request.getParameter("sclass");
		String snation = request.getParameter("snation");
		String sreligion = request.getParameter("sreligion");

		if (sname == null)
			sname = "";
		if (sno == null)
			sno = "";
		if (spolicstate == null)
			spolicstate = "";
		if (sgrade== null)
			sgrade = "";
		if (scardId == null)
			scardId = "";
		if (city == null)
			city = "";
		if (strainrank == null)
			strainrank = "";
		if (sclass == null)
			sclass = "";
		if (snation == null)
			snation = "";
		if (sreligion == null)
			sreligion = "";

		sname = URLDecoder.decode(sname, "UTF-8");
		spolicstate = URLDecoder.decode(spolicstate, "UTF-8");
		sgrade = URLDecoder.decode(sgrade, "UTF-8");
		city = URLDecoder.decode(city, "UTF-8");
		sclass = URLDecoder.decode(sclass, "UTF-8");
		strainrank = URLDecoder.decode(strainrank, "UTF-8");
		sreligion = URLDecoder.decode(sreligion, "UTF-8");
		snation = URLDecoder.decode(snation, "UTF-8");

		
		
//查询分页; mzt add 待议
		int size = ((Integer)getServlet().getServletContext().getAttribute("size")).intValue();
		int page = (request.getParameter("page")==null||request.getParameter("page").trim().length()<=0)?1:Integer.parseInt(request.getParameter("page"));
		Pagination pagination = new Pagination();
//得到组织机构id; mzt add 待议
		int orgId = -1;
		String selectedOrgIdS = request.getParameter("selectedOrgId");
		if(selectedOrgIdS != null && selectedOrgIdS.length() > 0)
		{
			orgId = Integer.parseInt(selectedOrgIdS);
			request.getSession().setAttribute("selectedOrgId", new Integer(orgId));
		}
		Teacher manager = (Teacher)request.getSession().getAttribute("manager");
		if(orgId < 0)
			orgId = manager.getOrg().getId().intValue();
		
		//Teacher tch = (Teacher) request.getSession().getAttribute("manager");
		try {
			TeacherService ts = (TeacherService) BusinessFactory
					.getBusiness(TeacherServiceImpl.class);
	//通过组织机构id得到学生列表; mzt 待议
			StudentService stuSevice =(StudentService) BusinessFactory.getBusiness(StudentServiceImpl.class);
			
			List students = stuSevice.getStudents(sname, sno, sclass,sgrade, snation, strainrank, sreligion, city, spolicstate, scardId, orgId, size, page, pagination);
			//getStudents(sname, sno, orgId, size, page, pagination);

			request.setAttribute("students", students);
			TreeList tl = ts.getOrgTree(manager.getOrg().getId().intValue());
			request.setAttribute("orgTree", tl);
			request.setAttribute("r_sno", sno);
			request.setAttribute("r_name", sname);
			
			request.setAttribute("r_city", city);
			request.setAttribute("r_religion", sreligion);
			request.setAttribute("r_grade", sgrade);
			request.setAttribute("r_nation", snation);
			request.setAttribute("r_cardId", scardId);
			request.setAttribute("r_trainRank", strainrank);
			request.setAttribute("r_stuClass", sclass);
			request.setAttribute("r_policticState", spolicstate);
			
			request.setAttribute("pagination", pagination);
			String pagiUrl = "manage.do?method=getStudent&sname="+sname+"&sno="+sno+"&spolicstate="+spolicstate+"&sgrade="+sgrade+"&scardId="+scardId+"&city="+city+"&"+
			    "&strainrank="+strainrank+"&sclass="+sclass+"&snation="+snation+"&sreligion="+sreligion;
						
			if(sno !=null && sno.trim().length()>0)
				pagiUrl += "&sno="+sno;
			if(sname != null && sname.trim().length()>0)
				pagiUrl += "&sname="+sname;
			pagiUrl+="&selectedOrgId=";
			request.setAttribute("pagiUrl", pagiUrl);
			
	//		response.setHeader("Content-Type", "UTF-8");
	//		response.setCharacterEncoding("UTF-8");
			return mapping.findForward("showStudent");
		} catch (Exception ex) {
			ex.printStackTrace();
			request.setAttribute("info", "查询学生不存在或者查询出错");
			return mapping.findForward("error");
		}
   }
	 
	public ActionForward parseXML(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String globalDataPath = "/WEB-INF/globalData.xml";
		ServletConfig cofig = getServlet().getServletConfig();
	//	String path=request.getRealPath("WEB-INF/globalData.xml");
		String realPath =cofig.getServletContext().getRealPath(globalDataPath);
		File file = new File(realPath);
//		FileInputStream file= new FileInputStream(realPath);
		    SAXBuilder builder = new SAXBuilder();
 		try {
 			Document read_doc = builder.build(file);
 			Element message = read_doc.getRootElement();
 			String currentYear=message.getChildText("currentYear");
 			String currentTerm = message.getChildText("currentTerm");
 			String size =message.getChildText("size");
 			String mostMoney=message.getChildText("mostMoney");
 			Element poorLevels = message.getChild("poorLevels");
 			List poorLevel = poorLevels.getChildren("poorLevel");
 		//	String level[]=new String[2];
 	     	String money[] = new String[2];
 			for (int i = 0; i < poorLevel.size(); i++) {
 				Element e = (Element) poorLevel.get(i);
 		//		level[i] = e.getChildText("level");
 				money[i]=e.getChildText("money");
 			}
 			String assessyear = message.getChildText("assessyear");
 			String tempscore = message.getChildText("tempscore");
 			String termscore = message.getChildText("termscore");
 			request.setAttribute("currentYear", currentYear);
 			request.setAttribute("currentTerm", currentTerm);
 			request.setAttribute("commen", money[0]);
 			request.setAttribute("very", money[1]);
 			request.setAttribute("page", size);
 			request.setAttribute("most", mostMoney);
 			request.setAttribute("assessyear", assessyear);
 			request.setAttribute("tempscore", tempscore);
 			request.setAttribute("termscore", termscore);
 			return mapping.findForward("manageXml");
 		} catch (Exception e) {
 			request.setAttribute("info", "解析XML文件失败！");
 			return mapping.findForward("error");
 		}
	}
	
	public ActionForward setXML(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String year=request.getParameter("year").trim();
		String term=request.getParameter("term").trim();
		String size=request.getParameter("cdpage").trim();
		String commen=request.getParameter("commen").trim();
		String mostMoney=request.getParameter("most").trim();
		String very=request.getParameter("very").trim();
		String assessyear = request.getParameter("assessyear").trim();
		String tempscore = request.getParameter("tempscore").trim();
		String termscore = request.getParameter("termscore").trim();
		ServletConfig config = getServlet().getServletConfig();
		try{
			if((year!=null||!year.equals(""))&&(term!=null||!term.equals(""))&&(commen!=null||!commen.equals(""))&&(very!=null||!very.equals(""))&&(size!=null||!mostMoney.equals(""))&&(very!=null||!mostMoney.equals(""))&&(assessyear!=null||!assessyear.equals(""))&&(tempscore!=null||!tempscore.equals(""))&&(termscore!=null||!termscore.equals(""))){
			//	String path=request.getRealPath("WEB-INF/globalData.xml");
				String globalDataPath = "/WEB-INF/globalData.xml";
				String realPath =config.getServletContext().getRealPath(globalDataPath);
				System.out.println(realPath);
				File file = new File(realPath);
				FileOutputStream fo = null;
				SAXBuilder sb = new SAXBuilder();
				Document doc = sb.build(file);
				Element root = doc.getRootElement();
				Element eyear = root.getChild("currentYear");
				eyear.setText(year);
				Element eterm = root.getChild("currentTerm");
				eterm.setText(term);
				Element esize = root.getChild("size");
				esize.setText(size);
				Element poorLevels = root.getChild("poorLevels");
				List poorLevel = poorLevels.getChildren("poorLevel");
				Element el = (Element)poorLevel.get(0);
				Element ecommen = el.getChild("money");
				ecommen.setText(commen);
				Element ele = (Element)poorLevel.get(1);
				Element every = ele.getChild("money");
				every.setText(very);
				Element emost = root.getChild("mostMoney");
				emost.setText(mostMoney);
				Element eassessyear = root.getChild("assessyear");
				eassessyear.setText(assessyear);
				Element etempscore = root.getChild("tempscore");
				etempscore.setText(tempscore);
				Element etermscore = root.getChild("termscore");
				etermscore.setText(termscore);
				XMLOutputter outp = new XMLOutputter();
				fo = new FileOutputStream(file);
				outp.output(doc, fo);
				
				config.getServletContext().setAttribute("currentYear", Integer.valueOf(year));
				config.getServletContext().setAttribute("currentTerm", term);
				config.getServletContext().setAttribute("size", Integer.valueOf(size));
				config.getServletContext().setAttribute("mostMoney", Float.valueOf(mostMoney));
				config.getServletContext().setAttribute("common", Float.valueOf(commen));
				config.getServletContext().setAttribute("very", Float.valueOf(very));
			//	System.out.println("a2="+assessyear);
				config.getServletContext().setAttribute("assessyear", assessyear);
				config.getServletContext().setAttribute("tempscore", tempscore);
				config.getServletContext().setAttribute("termscore", termscore);
				
				ContextDataService cds = (ContextDataService)BusinessFactory.getBusiness(ContextDataServiceImpl.class);
				ContextData cd = new ContextData();
				cd.setCdyear(year);
				cd.setCdterm(term);
				cd.setCdpage(new Integer(Integer.parseInt(size)));
				cd.setCommonmoney(new Float(Float.parseFloat(commen)));
				cd.setVerymoney(new Float(Float.parseFloat(very)));
				cd.setMostmoney(new Float(Float.parseFloat(mostMoney)));
			//	System.out.println("a3="+assessyear);
				cd.setAssessyear(assessyear);
				cd.setTempscore(tempscore);
				cd.setTermscore(termscore);
				cds.addContextData(cd);
				
				request.setAttribute("info", "设置成功！");
				return mapping.findForward("success");
			}else{
				request.setAttribute("info", "请填写完整信息！");
				return mapping.findForward("error");
			}
		}catch(Exception ex){
			request.setAttribute("info", "设置XML失败！");
			return mapping.findForward("error");
		}
		
	}
	public ActionForward addTermGuider(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String term = request.getParameter("term");
		String termName = request.getParameter("termName");
		TermGuiderManageDao tgmd = (TermGuiderManageDao)BusinessFactory.getBusiness(TermGuiderManageDBDao.class);
		if(tgmd.addTermGuider(term,termName)){
			return mapping.findForward("TGget");
		}
		else
			return mapping.findForward("TGfail");
	}
	
	public ActionForward deleteTermGuider(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		String termName = new String(request.getParameter("termName").getBytes("ISO-8859-1"),"utf-8");
		TermGuiderManageDao tgmd = (TermGuiderManageDao)BusinessFactory.getBusiness(TermGuiderManageDBDao.class);
		if(tgmd.deleteTermGuider(termName)){
			return mapping.findForward("TGget");
		}
		else
			return mapping.findForward("TGfail");
	}
	
	public ActionForward getAllTermGuider(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		TermGuiderManageDao tgmd = (TermGuiderManageDao)BusinessFactory.getBusiness(TermGuiderManageDBDao.class);
		List r = tgmd.getAllTermGuider();
		request.setAttribute("r", r);
		return mapping.findForward("TGshow");
	}
	
	public ActionForward getTerms(ActionMapping mapping, ActionForm form, 
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		ContextDataDAO cd =(ContextDataDAO) BusinessFactory.getBusiness(ContextDataDBDAO.class);
		List l = cd.getTerms();
		StringBuffer sb = new StringBuffer();
		for(int i=0;i<l.size();i++){
			String term = (String)l.get(i);
			sb.append(term+",");
		}
		response.setContentType("text/html");
		response.setCharacterEncoding( "UTF-8" );
		PrintWriter pw = response.getWriter();
		pw.write(sb.toString());
		pw.close();
		return null;
	}
	
	// 文件上传页面
	public ActionForward upFile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
			FileService fs = (FileService) BusinessFactory
					.getBusiness(FileServiceImpl.class);
			request.setCharacterEncoding("UTF-8");
			response.setContentType("text/html;charset=UTF-8");
			
			DiskFileItemFactory factory = new DiskFileItemFactory();
			//创建工厂生成FileItem
			ServletFileUpload upload = new ServletFileUpload(factory);
			//创建解析器。
			try {
				List list=upload.parseRequest(request);
				//将request所要传递的参数封装到FileItem中。
				Iterator iter=list.iterator();
				String fileName="";
				String filePath="";
				String flag="";
				boolean isExists=true;
				while(iter.hasNext())
				{
					FileItem fi=(FileItem) iter.next();
					if(fi.isFormField())
					{
						if(fi.getFieldName().equals("fileName"))
						{
							fileName=new String(fi.getString().trim().getBytes("iso-8859-1"),"UTF-8");
						}
						else if(fi.getFieldName().equals("flag")){
							flag=fi.getString().trim();
						}
					}
					else
					{
						fileName+=fi.getName().substring(fi.getName().lastIndexOf("."));
						String file=this.getServlet().getServletContext().getRealPath("/upload");
						filePath=file+"\\"+getUUID(fileName);		//获取文件上传到服务器的路径
						//filePath="upload\\"+getUUID(fileName);
						
						File f=new File(filePath);
						isExists=f.exists();		//判断文件是否已经存在、、、、
													//如果存在,则不用存到数据库
						if(!isExists)
						{
							fi.write(f);
						}
					}				 
				}
				
				if(!isExists)
				{
					//向数据库中插入fileType，fileName，filePath。。。。。
					Files mf=new Files();
					mf.setFilename(fileName);
					mf.setFlag(flag);
					mf.setFilepath(filePath);
					SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
					mf.setDtime(df.format(new Date()));
					fs.addfile(mf);
					request.setAttribute("info", "上传成功！");
					return mapping.findForward("FileUpLoad");
				}
				else
				{
					request.setAttribute("info", "文件已经存在！");
					return mapping.findForward("FileUpLoad");
				}
		} catch (Exception ex) {
			request.setAttribute("info", ex.getMessage());
			return mapping.findForward("error");
		}
	}
	
	// 删除文件
	public ActionForward delfile(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			FileService fs = (FileService) BusinessFactory
			.getBusiness(FileServiceImpl.class);
			int fileId = Integer.parseInt(request.getParameter("fileId"));
			fs.delfile(fileId);
			int size = ((Integer)getServlet().getServletContext().getAttribute("size")).intValue();
			int page = (request.getParameter("page")==null||request.getParameter("page").trim().length()<=0)?1:Integer.parseInt(request.getParameter("page"));
			Pagination pagination = new Pagination();
			Teacher manager = null;
			Teacher teacher = null;
			Student student = null;
			String uflag="";
			manager=(Teacher) request.getSession().getAttribute("manager");
			teacher = (Teacher) request.getSession().getAttribute("teacher");
			student = (Student) request.getSession().getAttribute("student");
			List files =null;
			if(manager!=null)
			{
				uflag="1";
				files = fs.getFiles(size, page, pagination,uflag);
			}else if(teacher!=null){
				uflag="2";
				files = fs.getFiles(size, page, pagination,uflag);
			}else if(student!=null){
				uflag="3";
				files = fs.getFiles(size, page, pagination,uflag);
			}
			String pagiUrl = "manage.do?method=getFiles";			
			request.setAttribute("pagiUrl", pagiUrl);
			request.setAttribute("pagination", pagination);
			request.setAttribute("files",files);
			request.setAttribute("uflag", uflag);
			request.setAttribute("info", "删除成功！");
			return mapping.findForward("FileDownLoad");
		} catch (Exception ex) {
			request.setAttribute("info", ex.getMessage());
			return mapping.findForward("error");
		}
	}

	//获取文件
	public ActionForward getFiles(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		try {
			FileService fs = (FileService) BusinessFactory
			.getBusiness(FileServiceImpl.class);
			int size = ((Integer)getServlet().getServletContext().getAttribute("size")).intValue();
			int page = (request.getParameter("page")==null||request.getParameter("page").trim().length()<=0)?1:Integer.parseInt(request.getParameter("page"));
			Pagination pagination = new Pagination();
			Teacher manager = null;
			Teacher teacher = null;
			Student student = null;
			String uflag="";
			manager=(Teacher) request.getSession().getAttribute("manager");
			teacher = (Teacher) request.getSession().getAttribute("teacher");
			student = (Student) request.getSession().getAttribute("student");
			List files =null;
			if(manager!=null)
			{
				uflag="1";
				files = fs.getFiles(size, page, pagination,uflag);
			}else if(teacher!=null){
				uflag="2";
				files = fs.getFiles(size, page, pagination,uflag);
			}else if(student!=null){
				uflag="3";
				files = fs.getFiles(size, page, pagination,uflag);
			}
			String pagiUrl = "manage.do?method=getFiles";			
			request.setAttribute("pagiUrl", pagiUrl);
			request.setAttribute("pagination", pagination);
			request.setAttribute("files",files);
			request.setAttribute("uflag", uflag);
			return mapping.findForward("FileDownLoad");
		} catch (Exception ex) {
			request.setAttribute("info", ex.getMessage());
			return mapping.findForward("error");
		}
	}
	
	public String getUUID(String fileName)
	{
		return UUID.randomUUID()+"_"+fileName;
	}
	
	//导出excel	
	public ActionForward toExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {
		// 从全局数据中取得 当前学期
		System.out.println("ggg");
		
		String sname = request.getParameter("sname");
		String spolicstate =request.getParameter("spolicstate");
		String sno = request.getParameter("sno");
		String sgrade = request.getParameter("sgrade");
		String scardId = request.getParameter("scardId");
		String city = request.getParameter("city");
		String strainrank = request.getParameter("strainrank");
		String sclass = request.getParameter("sclass");
		String snation = request.getParameter("snation");
		String sreligion = request.getParameter("sreligion");

		if (sname == null)
			sname = "";
		if (sno == null)
			sno = "";
		if (spolicstate == null)
			spolicstate = "";
		if (sgrade== null)
			sgrade = "";
		if (scardId == null)
			scardId = "";
		if (city == null)
			city = "";
		if (strainrank == null)
			strainrank = "";
		if (sclass == null)
			sclass = "";
		if (snation == null)
			snation = "";
		if (sreligion == null)
			sreligion = "";

		sname = URLDecoder.decode(sname, "UTF-8");
		spolicstate = URLDecoder.decode(spolicstate, "UTF-8");
		sgrade = URLDecoder.decode(sgrade, "UTF-8");
		city = URLDecoder.decode(city, "UTF-8");
		sclass = URLDecoder.decode(sclass, "UTF-8");
		strainrank = URLDecoder.decode(strainrank, "UTF-8");
		sreligion = URLDecoder.decode(sreligion, "UTF-8");
		snation = URLDecoder.decode(snation, "UTF-8");

		
		/*List jhstuList = (List) request.getAttribute("students");
		
		HttpSession session =request.getSession();
		//List<?> hh=  (List) session.getAttribute("stuList");
		for(int i = 0 ; i < jhstuList.size(); i++){
			Student stu = (Student) jhstuList.get(i);
			System.out.println(stu.getName());
		}*/
		
    	
		// 从 request 中得到 page,从全局中得到 size , 分页参数,
		// 目前不分页
		//int size = ((Integer)getServlet().getServletContext().getAttribute("size")).intValue();
		
		int page = (request.getParameter("page")==null||request.getParameter("page").trim().length()<=0)?1:Integer.parseInt(request.getParameter("page"));
		Pagination pagination = new Pagination();			
		HttpSession session =request.getSession();
		int size = Integer.parseInt(session.getAttribute("allsize").toString());//pagination.getResultCount();		
		int orgId = -1;
		String selectedOrgIdS = request.getParameter("selectedOrgId");
		if(selectedOrgIdS != null && selectedOrgIdS.length() > 0)
		{
			orgId = Integer.parseInt(selectedOrgIdS);
			request.getSession().setAttribute("selectedOrgId", new Integer(orgId));
		}
		
		Teacher manager = (Teacher)request.getSession().getAttribute("manager");
		List stuList = null;
		if(orgId < 0)
			orgId = manager.getOrg().getId().intValue();		
		try{
			TeacherService ts = (TeacherService)BusinessFactory.getBusiness(TeacherServiceImpl.class);
            StudentService stuSevice =(StudentService) BusinessFactory.getBusiness(StudentServiceImpl.class);			
		    stuList = stuSevice.getStudents(sname, sno, sclass,sgrade, snation, strainrank, sreligion, city, spolicstate, scardId, orgId, size, page, pagination);
			//ManagerService ms = (ManagerService)BusinessFactory.getBusiness(ManagerServiceImpl.class);
			//stuList = ts.getClassStudent(orgId, size, page, pagination);
			System.out.println("stu" + stuList.size());
			
		}catch(Exception ex){
			request.setAttribute("info", "得到学生列表出错");			
		}			
		
    	if(stuList==null){
	      } 
	     if(stuList!=null){ 
	    	 
	    	 HSSFWorkbook wb = new HSSFWorkbook();
	  	     HSSFSheet sheet = wb.createSheet("sheet1");
	  	     
	  	     //设置字体  
	  	     HSSFCellStyle style = wb.createCellStyle();
	  	   
	         HSSFFont font = wb.createFont();  
	         font.setFontHeightInPoints((short)12);  
	         font.setFontName("Courier New");  
	         font.setItalic(false);   
	         font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD); 
	         style.setFont(font);  
	  	   
	  	     HSSFRow row0 = sheet.createRow(0); 	  	     
	  	     List<String> elist = new ArrayList<String>();
	  	     elist.add(0, "学号");
	  	     elist.add(1,"学生姓名");
	  	     elist.add(2,"学籍情况");
	  	     elist.add(3,"年级");
	  	     elist.add(4,"班级");
	  	     elist.add(5,"性别");
	  	     elist.add(6,"民族");
	  	     elist.add(7,"身份证号");
	  	     elist.add(8,"学制");
	  	     elist.add(9,"培养方法");	 
	  	     elist.add(10,"培养层次");
	  	     
	  	     
	  	     
	  	     for(int i = 0; i < elist.size() ;i++){
	  	    	 HSSFCell cell0 = row0.createCell((short)i);
		  	     cell0.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
		  	     cell0.setCellValue(elist.get(i));
		  	     cell0.setCellStyle(style); 
	  	     }
	  	     	  	     	  			  	      	         	         	      	    
	    
	              	for (int i = 1; i < stuList.size() + 1; i++) {
	              		Student stu = (Student) stuList.get(i - 1);
	              		HSSFRow row = sheet.createRow(i); 
	              		
	              		for(int j=0;j < elist.size();j++){
	              			HSSFCell cell = row.createCell((short)j);
	              			cell.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	              			if(j==0){
	              				//cell.setCellValue(stu.getId().toString());
	              				cell.setCellValue(stu.getSno());
	              			}else if(j==1){
	              				cell.setCellValue(stu.getName());
	              				//System.out.println("name" + stu.getName());
	              			} else if(j==2){
	              				//cell.setCellValue(stu.getSno());
	              			} else if(j==3){
	              				cell.setCellValue(stu.getGrade());
	              			} else if(j==4){
	              				cell.setCellValue(stu.getSclass());
	              			} else if(j==5){
	              				cell.setCellValue(stu.getSex());
	              			} else if(j==6){
	              				cell.setCellValue(stu.getNation());
	              			} else if(j==7){
	              				cell.setCellValue(stu.getIdcard());
	              			} else if(j==8){
	              				cell.setCellValue(stu.getSchoolsystem());
	              			} else if(j==9){
	              				cell.setCellValue(stu.getTrainmethod());
	              			} else if(j==10){
	              				cell.setCellValue(stu.getTrainlevel());
	              			} 
	              			
	              	  		
	              		 }
	              	}
	         /*FileOutputStream os = new FileOutputStream("e:\\workbook03.xls");
	         wb.write(os);
	         os.close();*/	          	         
	        
	        response.setContentType("application/msexcel");
	 		response.setHeader("Content-disposition",
	 				"inline;filename=studentdetail.xls");
	 		OutputStream os;	 		
	 		try {
	 			os = response.getOutputStream();
	 			wb.write(os);
	 			os.flush();
	 			os.close();
	 		} catch (IOException e) {
	 			// TODO Auto-generated catch block
	 			e.printStackTrace();
	 		}
	         
	     }
		
	     return null;
	}
	
	//导出民族excel	
	public ActionForward toNationExcel(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response)
			throws Exception {			
		
		// 从全局数据中取得 当前学期
		System.out.println("toNationExcel");
		
		String sname = request.getParameter("sname");
		String spolicstate =request.getParameter("spolicstate");
		String sno = request.getParameter("sno");
		String sgrade = request.getParameter("sgrade");
		String scardId = request.getParameter("scardId");
		String city = request.getParameter("city");
		String strainrank = request.getParameter("strainrank");
		String sclass = request.getParameter("sclass");
		String snation = request.getParameter("snation");
		String sreligion = request.getParameter("sreligion");

		if (sname == null)
			sname = "";
		if (sno == null)
			sno = "";
		if (spolicstate == null)
			spolicstate = "";
		if (sgrade== null)
			sgrade = "";
		if (scardId == null)
			scardId = "";
		if (city == null)
			city = "";
		if (strainrank == null)
			strainrank = "";
		if (sclass == null)
			sclass = "";
		if (snation == null)
			snation = "";
		if (sreligion == null)
			sreligion = "";

		sname = URLDecoder.decode(sname, "UTF-8");
		spolicstate = URLDecoder.decode(spolicstate, "UTF-8");
		sgrade = URLDecoder.decode(sgrade, "UTF-8");
		city = URLDecoder.decode(city, "UTF-8");
		sclass = URLDecoder.decode(sclass, "UTF-8");
		strainrank = URLDecoder.decode(strainrank, "UTF-8");
		sreligion = URLDecoder.decode(sreligion, "UTF-8");
		snation = URLDecoder.decode(snation, "UTF-8");

		
		/*List jhstuList = (List) request.getAttribute("students");
		
		HttpSession session =request.getSession();
		//List<?> hh=  (List) session.getAttribute("stuList");
		for(int i = 0 ; i < jhstuList.size(); i++){
			Student stu = (Student) jhstuList.get(i);
			System.out.println(stu.getName());
		}*/
		
    	
		// 从 request 中得到 page,从全局中得到 size , 分页参数,
		// 目前不分页
		//int size = ((Integer)getServlet().getServletContext().getAttribute("size")).intValue();
		
		int page = (request.getParameter("page")==null||request.getParameter("page").trim().length()<=0)?1:Integer.parseInt(request.getParameter("page"));
		Pagination pagination = new Pagination();			
		HttpSession session =request.getSession();
		int size = Integer.parseInt(session.getAttribute("allsize").toString());//pagination.getResultCount();		
		int orgId = -1;
		String selectedOrgIdS = request.getParameter("selectedOrgId");
		if(selectedOrgIdS != null && selectedOrgIdS.length() > 0)
		{
			orgId = Integer.parseInt(selectedOrgIdS);
			request.getSession().setAttribute("selectedOrgId", new Integer(orgId));
		}
		
		Teacher manager = (Teacher)request.getSession().getAttribute("manager");
		List stuList = null;
		if(orgId < 0)
			orgId = manager.getOrg().getId().intValue();		
		try{
			TeacherService ts = (TeacherService)BusinessFactory.getBusiness(TeacherServiceImpl.class);
            StudentService stuSevice =(StudentService) BusinessFactory.getBusiness(StudentServiceImpl.class);
		    stuList = stuSevice.getStudents(sname, sno, sclass,sgrade, snation, strainrank, sreligion, city, spolicstate, scardId, orgId, size, page, pagination);
			//ManagerService ms = (ManagerService)BusinessFactory.getBusiness(ManagerServiceImpl.class);
			//stuList = ts.getClassStudent(orgId, size, page, pagination);
			System.out.println("stu" + stuList.size());
			
		}catch(Exception ex){
			request.setAttribute("info", "得到学生列表出错");			
		}			
		
    	if(stuList==null){
	      } 
	     if(stuList!=null){ 
	    	HSSFWorkbook wb = new HSSFWorkbook();// 创建excel文档
	 		HSSFSheet sheet = wb.createSheet("sheet1");//创建一个单一页面

	 		//第一行
	 		Region region1 = new Region(0, (short) 0, 0, (short) 12);
	 		sheet.addMergedRegion(region1);		
	 		HSSFRow row0 = sheet.createRow(0);//创建第一列
	 		HSSFCell cell00 = row0.createCell((short) 0);//创建第一个单元格
	 		cell00.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell00.setCellValue("长  春  理  工  大  学  在  校  生  宗  教  信  仰  情  况");
	 		
	 		//sheet.setColumnWidth(0, 6766); //第一个参数代表列id(从0开始),第2个参数代表宽度值
	 		
	 		
	 		
	 		HSSFRow row1 = sheet.createRow(1);//创建第二列
	 		
	 		
	 		HSSFCell cell10 = row1.createCell((short) 0);
	 		HSSFCell cell11 = row1.createCell((short) 1);
	 		HSSFCell cell12 = row1.createCell((short) 2);
	 		HSSFCell cell13 = row1.createCell((short) 3);
	 		HSSFCell cell14 = row1.createCell((short) 4);
	 		HSSFCell cell15 = row1.createCell((short) 5);
	 		HSSFCell cell16 = row1.createCell((short) 6);
	 		HSSFCell cell17 = row1.createCell((short) 7);
	 		HSSFCell cell18 = row1.createCell((short) 8);
	 		HSSFCell cell19 = row1.createCell((short) 9);
	 		HSSFCell cell110 = row1.createCell((short) 10);
	 		HSSFCell cell111 = row1.createCell((short) 11);
	 		HSSFCell cell112 = row1.createCell((short) 12);
	 		
	 		cell10.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell11.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell12.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell13.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell14.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell15.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell16.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell17.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell18.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell19.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell110.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell111.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		cell112.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
	 		
	 		
	 		cell10.setCellValue("序号");
	 		cell11.setCellValue("学院");
	 		cell12.setCellValue("班级");
	 		cell13.setCellValue("姓名");
	 		cell14.setCellValue("性别");
	 		cell15.setCellValue("民族");
	 		cell16.setCellValue("宗教");
	 		cell17.setCellValue("何时入教");
	 		cell18.setCellValue("信教原因");
	 		cell19.setCellValue("是否定期参加宗教活动");
	 		cell110.setCellValue("是否传教");
	 		cell111.setCellValue("家庭住址（省、市、县）");
	 		cell112.setCellValue("备注");
	 		
	 		

	 		// 设置
	 		HSSFCellStyle style = wb.createCellStyle();
	 		
	 		style.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 设置居中
	 		cell00.setCellStyle(style);
	 		sheet.setColumnWidth(((short)9), (short)4950);//第一个参数代表列id(从0开始),第2个参数代表宽度值
	 		sheet.setColumnWidth((short)11,(short) 4850);
	 		//设置字体
	 		HSSFFont font = wb.createFont();
	 		font.setFontHeightInPoints((short) 12);
	 		font.setFontName("Courier New");
	 		font.setItalic(false);
	 		// font.setBoldweight((short)8);
	 		font.setBoldweight(HSSFFont.BOLDWEIGHT_BOLD);

	 		style.setFont(font);
	 		//cell0.setCellStyle(style);
	 		
	 		for (int i = 2; i < stuList.size() + 2; i++) {
          		Student stu = (Student) stuList.get(i - 2);
          		
          		ReligionActiveDBDao rad = new ReligionActiveDBDao();
          		List<ReligionActive> ral = null;
          		int rals = 0 ; 
          		if(stu != null){
          			ral = rad.getReligionActiveByStuid(stu.getId());
          			rals = ral.size();
          		}
          		/*System.out.println("ral" + ral.size());*/
          		          
          		StudentDetailDBDAO stdd = new StudentDetailDBDAO();          		
          		StudentDetail sd = stdd.getStudentDetail(stu.getId());
          		/*if(sd != null){
          			System.out.println("sdid" + sd.getId());
          		}*/
          		
          		
          		/*ClassesDBDao cd = new ClassesDBDao();
          		Classes cl = cd.getClasses(stu.getSclass()).get(0); */ 
          		/*OrgDBDAO od = new OrgDBDAO();
          		Org org = null;*/
          		/*if(cl != null){
          			org = od.getOrgByid(cl.getOrgId()).get(0);
          			System.out.println("orgid" + org.getId());
          		}*/
          		//Org org = null ;          		           		
          		
          		
          		HSSFRow row = sheet.createRow(i); 
          		
          		for(int j=0;j < 13;j++){          			
          			HSSFCell cell = row.createCell((short)j);
          			cell.setEncoding(HSSFWorkbook.ENCODING_UTF_16);
          			if(j==0){          				
          				cell.setCellValue(stu.getSno());
          			}else if(j==1){
          				/*if(cl != null){
          					cell.setCellValue(cl.getProfession());
                  			org = od.getOrgByid(cl.getOrgId()).get(0);
                  			System.out.println("orgid" + org.getId());
                  			if(org != null){
                  				cell.setCellValue(org.getName());
                  			}
                  			
                  		} */        				   				         				
          			} else if(j==2){
          				cell.setCellValue(stu.getSclass());
          			} else if(j==3){
          				cell.setCellValue(stu.getName());
          			} else if(j==4){
          				cell.setCellValue(stu.getSex());
          			} else if(j==5){
          				cell.setCellValue(stu.getNation());
          			} else if(j==6){
          				if(sd != null){
          					cell.setCellValue(sd.getRtype());
                  		}         				
          			} else if(j==7){
          				if(sd != null){
          					cell.setCellValue(sd.getRtime());
                  		}         				
          			} else if(j==8){
          				if(sd != null){
          					cell.setCellValue(sd.getRreason());
                  		}         				
          			} else if(j==9){
	      				if(rals == 0){
		      					cell.setCellValue("否");
		      				}
	      				else{
	      					    cell.setCellValue("是");
	      				}
          				
          			} else if(j==10){
          				if(sd != null){
          					cell.setCellValue(sd.getCreligion());
                  		}          				
          			}  else if(j==11){
          				if(sd != null){
          					cell.setCellValue(sd.getFamilyaddress());
                  		} 
          				
          			} else if(j==12){
          				if(sd != null){
          					cell.setCellValue(sd.getRemark());
                  		} 
          				
          			}
          			
          	  		
          		 }
          	}
	 		
	 		
	 		response.setContentType("application/msexcel");
	 		response.setHeader("Content-disposition",
	 				"inline;filename=studentNation.xls");
	 		OutputStream os;	 		
	 		try {
	 			os = response.getOutputStream();
	 			wb.write(os);
	 			os.flush();
	 			os.close();
	 		} catch (IOException e) {
	 			// TODO Auto-generated catch block
	 			e.printStackTrace();
	 		}
	         
	     }
		
	     return null;
	}
}


