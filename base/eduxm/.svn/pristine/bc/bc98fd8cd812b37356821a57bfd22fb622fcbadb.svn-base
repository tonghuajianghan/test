var autoId = 0; // 这个autoId可以用来生成tr的id

function Match(key, val, typefunction, url, combobox) {
	this.key = key;
	this.val = val;
	this.typefunction = typefunction;
	if(arguments.length > 3){
	this.url = url;
	this.combobox = combobox;
	}
}

function textfunction(str) {
	return '<input name="search.values" type="text"/>';
}

function selectfunction(id) { 
	return '<input name="search.values" id="st_'+id+'" type="text"/>';
}

function datefunction(str) {
	return  '<input type="text" name="search.values" onclick="WdatePicker({dateFmt:\'yyyy年MM月dd日\'})"></input>';
}
//在Student——list的添加检索项中
function addSelect() {
	//alert("start");
	var retStr;
	var str0 = '<select name = "search.logicalopts"><option value="and">AND</option><option value="or">OR</option></select>';
	var str1 = "";
	autoId++;
	str1 = '<select name = "search.columns" onchange="change(' + autoId
			+ ',this)">' + '<option value="-">---请选择要检索的单元---</option>';
	for (i = 0; i < arrMatch.length; i++) {
		str1 = str1 + '<option value = "c_' + arrMatch[i].key + '">'
				+ arrMatch[i].val + '</option>';
	}
	str1 = str1 + "</select>";
	var str2 = '<select name="search.operators">';
	str2 = str2 + '<option value="eq">=</option>';
	str2 = str2 + '<option value="ne">&ne;</option>';
	str2 = str2 + '<option value="gt">&gt;</option>';
	str2 = str2 + '<option value="ge">&ge;</option>';
	str2 = str2 + '<option value="lt">&lt;</option>';
	str2 = str2 + '<option value="le">&le;</option>';
	str2 = str2 + '<option value="like">like</option></select>';
	var str3 = '<input type="text" name="search.values"></input>';
	var str4 = '<select name = "search.orders"><option value="none">不排序</option><option value="asc">升序</option><option value="desc">降序</option></select>';
	var str5 = "<a name='delLink' href='javascript:remove();'>删除检索项</a>";
	$('#tableid').datagrid('appendRow',{
		way			:	str0,
		target		:	str1,
		method		:	str2,
		content		:	str3,
		sort		:	str4,
		dos			:	str5
	});	
	
	setLinkbuttonStyle();
}

function setLinkbuttonStyle() {
	$("a[name='filesLink']").linkbutton({
		iconCls: 'icon-files'
	});
	$("a[name='detailsLink']").linkbutton({
		iconCls: 'icon-details'
	});
	$("a[name='delLink']").linkbutton({
		iconCls: 'icon-cancel'
	});
	$("a[name='editLink']").linkbutton({
		iconCls: 'icon-edit'
	});
	
}

function change(id, sel) {  //id为检索表格的id
	var checkIndex = sel.selectedIndex;
	var rowIndex = $("#tableid").datagrid("getRowIndex",$("#tableid").datagrid("getSelected"));//获取选中行的行索引
	if(checkIndex > 0) {
		checkIndex = checkIndex - 1;
		var am=arrMatch[checkIndex];
		var ct = am.typefunction(rowIndex);//设置content列
		str1 = '<select name = "search.columns" onchange="change(1,this)">' + '<option value="-">---请选择要检索的单元---</option>';
		for (i = 0; i < arrMatch.length; i++) {
			if(i == checkIndex) {
				str1 = str1 + '<option selected="true" value="' + arrMatch[i].key + '">'
				+ arrMatch[i].val + '</option>';
			}else{
				str1 = str1 + '<option value="' + arrMatch[i].key + '">'
				+ arrMatch[i].val + '</option>';
			}
		}
		str1 = str1 + "</select>";
		//更新表格
		$("#tableid").datagrid("updateRow",{
			index:rowIndex,
			row:{
				target:str1,
				content:ct
			}
		});
		if(am.combobox){
			am.combobox("st_"+rowIndex,am.url);
		}
	}else{ //只剩下最开始的检索项，并且用户没有检索条件,这时候重新载入检索表格，还原初始的检索表格
		$("#tableid").datagrid("reload");
	}
	setLinkbuttonStyle();
}

function remove() {
	var row = $('#tableid').datagrid('getSelected');//获取选中行
	$('#tableid').datagrid('deleteRow',$('#tableid').datagrid('getRowIndex',row));
}

function replace(type) {
	$('td[id^="' + type + '_"]').each(function(){
		$(this).text(getKeyByVal($(this).text(), type));
	  });
}
function replace1(id,key,val) {
	$('td[id^="' + id + '_"]').each(function() {
		$(this).text(getKeyByVal(val,key));
	});
}
function toPage(pageNumber) {
	$("#pagenum").val(pageNumber);
	searchSubmit();
}

function searchChange(search) {
	var searchIndex = search.selectedIndex + 1;
	toPage(searchIndex);
}

function combobox(id, url){
	$('#' + id).combobox({    
	    url:url,    
	    valueField:'id',    
	    textField:'text',
	 	filter: function(q, row){
	 		if(row["pinyin"].indexOf(q) >= 0||row["text"].indexOf(q) >= 0){
	 			return true;
	 		}
	 		return false;
	 	}
	});
}

function combotree(id, url){
	$('#' + id).combotree({    
	    url: url,    
	    required: true,
	    onLoadSuccess: function(node, data){
	    	var t = $('#' + id).combotree('tree');
	    	t.tree('collapseAll');
	    }
	});
}
